{"version":3,"file":"static/webpack/static/development/pages/index.js.89f5b79aeb1c7978773a.hot-update.js","sources":["webpack:///./components/organisms/header/index.js"],"sourcesContent":["import React, { Component, createRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport Link from 'next/link'\nimport { withRouter } from 'next/router'\n\nimport Container from '_atoms/container'\nimport Brand from '_atoms/brand'\n\nimport styles from './styles.css'\n\nclass Header extends Component {\n  state = {\n    isNavOpen: false,\n    currentPath: '',\n    navHeight: undefined,\n  }\n\n  navRef = createRef()\n\n  static propTypes = {\n    routes: PropTypes.arrayOf(\n      PropTypes.shape({\n        path: PropTypes.string,\n        text: PropTypes.string,\n      })\n    ),\n    isFixed: PropTypes.bool,\n  }\n\n  static defaultProps = {\n    isFixed: false,\n  }\n\n  componentDidMount() {\n    const { router } = this.props\n    \n    this.setState({\n      currentPath: router.asPath,\n      navHeight: this.navRef.current.scrollHeight,\n    })\n  }\n\n  isCurrentNavItem(path) {\n    const { currentPath } = this.state\n    return currentPath == path\n  }\n\n  handleNavToggle = () => {\n    this.setState(prevState => ({\n      isNavOpen: !prevState.isNavOpen,\n    }))\n  }\n\n  render() {\n    const { routes, isFixed, navHeight } = this.props\n    const { isNavOpen } = this.state\n\n    return (\n      <header className={classNames(styles.header, { [styles.fixed]: isFixed })}>\n        <Container>\n          <div className={styles.headerInner}>\n            <Brand />\n            <button onClick={this.handleNavToggle} className={styles.navToggler}>\n              <span />\n              <span />\n              <span />\n            </button>\n            <nav ref={this.navRef} style={{ height: isNavOpen ? `${navHeight}px` : '0' }} className={classNames(styles.nav, { [styles.navOpen]: isNavOpen })}>\n              {routes.map(route => (\n                <Link href={route.path} key={route.path}>\n                  <a\n                    className={classNames(styles.navItem, {\n                      [styles.navItemCurrent]: this.isCurrentNavItem(route.path),\n                    })}\n                  >\n                    {route.text}\n                  </a>\n                </Link>\n              ))}\n            </nav>\n          </div>\n        </Container>\n      </header>\n    )\n  }\n}\n\nexport default withRouter(Header)\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AA6BA;AACA;AAAA;AACA;AADA;AAAA;AAGA;AACA;;;;;;AAngBA;;;;AA1EA;AACA;AADA;AAUA;AAEA;AACA;AAFA;AAKA;AAPA;AACA;AAVA;AAoBA;AADA;AACA;AAyDA;;;;A","sourceRoot":""}